#version 430 

layout(std140, binding=4) buffer Pos
{
    vec4 Positions[];
};

layout(std140, binding=5) buffer Vel
{
    vec4 Velocities[];
};

layout(std140, binding=6) buffer Col
{
    vec4 Colors[];
};

layout( local_size_x = 128, local_size_y = 1, local_size_z = 1 ) in;
const vec3 G = vec3(0.0, -0.1, 0.0);
const float DT = 0.1;

float vecLen (vec3 v)
{
	return sqrt(v.x*v.x + v.y*v.y + v.z*v.z);
}

vec3 normalize (vec3 v)
{
	return v / (vecLen(v)+0.0001);
}

// From https://stackoverflow.com/questions/46637752/pseudo-random-number-generation-on-the-gpu
uint wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

void main() {
    uint gid = gl_GlobalInvocationID.x;

    vec3 p = Positions[gid].xyz;
    vec3 v = Velocities[gid].xyz;;
    // float rand_vel_x = float(wang_hash(gid+int(p.y))-wang_hash(gid));
    // float rand_vel_y = float(wang_hash(gid+)-wang_hash(gid+11));
    // float rand_vel_z = float(wang_hash(gid+50)-wang_hash(gid+13));
    // vec3 random_vel = vec3(rand_vel_x,rand_vel_y,rand_vel_z);
    vec3 vp = v + G*DT;
    vec3 pp = p + v*DT + G*DT*DT;
    
    Positions[gid].xyz = pp;
    Velocities[gid].xyz = vp;
    Colors[gid].xyz = vp;
}
